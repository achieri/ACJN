package br.com.acsystems.tests;

//C:\Users\t1108dgf\desenvolvimento\eclipse-jee-oxygen-1a-win32-x86_64\eclipse.exe -vm "C:\Users\t1108dgf\desenvolvimento\openjdk-1.8.0.151-1.b12\bin"

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Random;
import java.util.TreeMap;

public class Main {
	private static Random rand = new Random();
//	private static SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	private static int[] listaValores = {50,15,20,30,50,78};
	private static Date[] datas = new Date[6];
	//private static Enum totalPeriodos
//	private static int PERIODO_1H = 60/5;
//	private static int PERIODO_1D = 24*60/5;
	
	public enum Periodo{
		PERIODO_1H(60/5), PERIODO_1D(24*60/5),PERIODO_5M(1),PERIODO_TESTE(2) ;
		
		public int totalPeriodos;
		Periodo(int periodos){
			totalPeriodos = periodos;
		}
	}

	public static void main(String[] args) throws ParseException {
		
		List<String>listaNome = montaListaNomes();
		Map<Date, Map<String,Ativo>> mapa = obtemMapaAtivos(listaNome);
//		mapa.forEach((k,v) ->{
//			System.out.println("chave - "+k+"- valor - "+v+"-");
//			});
//		Calendar c = GregorianCalendar.getInstance();
//		c.add(Calendar.DAY_OF_MONTH, -1);
		
		// pesquisa
		Double valorMedia = obtemMedia(obtemAtivosRetroativos(Periodo.PERIODO_TESTE, listaNome.get(0), mapa));
		System.out.println("Media - "+valorMedia);
		
		Double desvioPadrao = obtemDesvioPadrao(valorMedia, mapa);
		System.out.println("Desvio padrao - "+desvioPadrao);
		
		obtemListaMaiorVariacao(mapa, Periodo.PERIODO_TESTE);
	}
	
	
	private static Map<Date, Map<String, Ativo>> obtemMapaAtivos(List<String> listaNome) {
		Map<Date, Map<String, Ativo>> map = new TreeMap<Date, Map<String, Ativo>>();
		Calendar c = Calendar.getInstance();
		String nome = listaNome.get(0);
		Map<String, Ativo> mapAtivo = null;
		for(int i=0;i<listaValores.length;i++){
			mapAtivo = new HashMap<String, Ativo>();
			populaLoop(i, c, nome, mapAtivo, map);
		}
		return map;
	}


	private static void populaLoop(int i, Calendar c, String nome, Map<String, Ativo> mapAtivo, Map<Date, Map<String, Ativo>> map) {
		Ativo atv;
		c.set(Calendar.MINUTE, i*5);
		atv = new Ativo(nome,c.getTime(),listaValores[i] );
		mapAtivo.put(nome, atv);
		map.put(c.getTime(), mapAtivo);
		datas[i] =c.getTime(); 
	}


	private static List<Ativo> obtemListaMaiorVariacao(Map<Date, Map<String, Ativo>> mapa, Periodo p){
		Map<Date, Map<String, Ativo>> novoMapa = obtemMapaPeriodos(mapa, p);
		return new ArrayList<Ativo>();
	}
	

	private static Map<Date, Map<String, Ativo>> obtemMapaPeriodos(Map<Date, Map<String, Ativo>> mapa, Periodo p) {
		Map<Date, Map<String, Ativo>> novoMapa = new HashMap<Date, Map<String, Ativo>>(); 
		Iterator<Map.Entry<Date, Map<String, Ativo>>> it = mapa.entrySet().iterator();
		int counter =0;
		List <Ativo> listTemp = new ArrayList<Ativo>();
		Map<String, Ativo> mapaVariacao = new TreeMap<>();
		while(it.hasNext()) {
			Entry<Date, Map<String, Ativo>> map2 = it.next();
			if(counter++ % p.totalPeriodos == 0 && counter > 1) {
				populaVariacao(novoMapa, listTemp, mapaVariacao);
				listTemp = new ArrayList<Ativo>();
			}
			Ativo ativoTmp = map2.getValue().entrySet().stream().findFirst().get().getValue();
			listTemp.add(ativoTmp);
		}
		populaVariacao(novoMapa, listTemp, mapaVariacao);
		return novoMapa;
	}


	private static void populaVariacao(Map<Date, Map<String, Ativo>> novoMapa, List<Ativo> listTemp,
			Map<String, Ativo> mapaVariacao) {
		boolean isValorFinalMenor =listTemp.get(0).getValorFechamento()>=listTemp.get(listTemp.size()-1).getValorFechamento();
		Double valorPrimeiro  = isValorFinalMenor?listTemp.get(listTemp.size()-1).getValorFechamento():listTemp.get(0).getValorFechamento();
		Ativo valorSegundo = !isValorFinalMenor?listTemp.get(listTemp.size()-1):listTemp.get(0);
		Double valorFinal = valorSegundo.getValorFechamento();
		double resultado = (valorPrimeiro/valorFinal)*100 *(!isValorFinalMenor?1:-1);
		System.out.println("Variacao - "+resultado);
		valorSegundo.setTaxaVariacao(resultado);
		mapaVariacao.put(valorSegundo.getCodAtivo(), valorSegundo);
		novoMapa.put(valorSegundo.getData(),mapaVariacao);
	}


	private static Double obtemDesvioPadrao(Double valorMedia, Map<Date, Map<String, Ativo>> mapa) {
		double[] desvioPadrao = {0};
		mapa.entrySet().forEach(v -> v.getValue().entrySet().forEach(v1 ->{
			desvioPadrao[0] +=Math.pow((v1.getValue().getValorFechamento() - valorMedia),2);
//			System.out.println(desvioPadrao[0]);
		}));
//		Iterator<Map.Entry<Date, Map<String, Ativo>>> it = mapa.entrySet().iterator();
//		while(it.hasNext()) {
//			Entry<Date, Map<String, Ativo>> map2 = it.next();
//			Iterator<Map.Entry<String, Ativo>> it2 = map2.getValue().entrySet().iterator();	
//			while(it2.hasNext()) {
//				Ativo atv = it2.next().getValue();
//				desvioPadrao[0] +=Math.pow((atv.getValorFechamento() - valorMedia),2);
//				System.out.println(atv.getValorFechamento()+"-"+Math.pow((atv.getValorFechamento() - valorMedia),2)+"-"+desvioPadrao[0]);
//				System.out.println();
//			}
//		}
		return Math.sqrt(desvioPadrao[0]/mapa.size());
	}





	private static Double obtemMedia(Map<Date, Ativo> mapa) {
//		return mapa.values().stream().collect(Collectors.summarizingDouble(Ativo::getValorFechamento)).getSum()/mapa.size();
		double valor = 0;
		Iterator<Map.Entry<Date, Ativo>> it = mapa.entrySet().iterator();
		while(it.hasNext()){
			valor += it.next().getValue().getValorFechamento();
		}
		return new Double(valor)/mapa.size();
		
	}





	private static Map<Date,Ativo> obtemAtivosRetroativos(Periodo periodo, String nomeAtivo, Map<Date, Map<String,Ativo>> mapa) throws ParseException {
		Map<Date,Ativo> map = new TreeMap<>();
		Calendar c = null;
		for(int i=0;i<periodo.totalPeriodos;i++) {
//			c = GregorianCalendar.getInstance();
//			c.add(Calendar.DAY_OF_MONTH, -i);
//			Date data = sdf.parse(sdf.format(c.getTime()));
			map.put(datas[i],mapa.get(datas[i]).get(nomeAtivo));
			// TODO esta correto acima
//			map.put(new Date(),mapa.get(data).get(nomeAtivo));
		}
		return map;
	}



	private static List<String> montaListaNomes() {
		List<String> lista = new ArrayList<>();
		for(int i=0;i<40;i++) {
			lista.add(String.valueOf((char)(rand.nextInt(200)+64)+(char)(rand.nextInt(200)+64)));
		}
		return lista;
	}

//	private static Map<Date, Map<String,Ativo>> obtemMapaAtivos(List<String> listaNome) throws ParseException {
//		Ativo at = null;
//		SortedMap <Date, Map<String,Ativo>> mapa = new TreeMap<>();
//		
//		for(int i=0;i<listaValores.length;i++) {
//			Map<String,Ativo> mapaAtivo = new HashMap<>();
//			Calendar c = GregorianCalendar.getInstance();
//			c.add(Calendar.DAY_OF_MONTH, -i);
//			for(int j=0;j<1;j++) {
//				at = new Ativo();
//				at.setValorFechamento(Double.valueOf(listaValores[i]));
//				at.setCodAtivo(listaNome.get(0));
//				at.setData(c.getTime());
//				mapaAtivo.put(listaNome.get(0), at);
//			}
//			mapa.put(sdf.parse(sdf.format(c.getTime())),mapaAtivo);
//		}
//		return mapa;
//	}

	

}
class Ativo{
	private Double taxaVariacao;
	private Double valorFechamento;
	private String codAtivo;
	private Date data;
	
	
	
	public Ativo(String nome, Date data, int valor) {
		this.setCodAtivo(nome);
		this.setData(data);
		this.setValorFechamento(Double.valueOf(valor));
	}
	public Date getData() {
		return data;
	}
	public void setData(Date data) {
		this.data = data;
	}
	public Double getTaxaVariacao() {
		return taxaVariacao;
	}
	public void setTaxaVariacao(Double taxaVariacao) {
		this.taxaVariacao = taxaVariacao;
	}
	public String getCodAtivo() {
		return codAtivo;
	}
	public void setCodAtivo(String codAtivo) {
		this.codAtivo = codAtivo;
	}
	public Double getValorFechamento() {
		return valorFechamento;
	}
	public void setValorFechamento(Double valorFechamento) {
		this.valorFechamento = valorFechamento;
	}
	
	
}
